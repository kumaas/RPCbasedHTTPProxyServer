/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef proxy_web_service_TYPES_H
#define proxy_web_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace rpc {

typedef std::string HttpRequest;

class HttpResponse;

typedef struct _HttpResponse__isset {
  _HttpResponse__isset() : was_successful(false), document_body(false) {}
  bool was_successful :1;
  bool document_body :1;
} _HttpResponse__isset;

class HttpResponse {
 public:

  HttpResponse(const HttpResponse&);
  HttpResponse& operator=(const HttpResponse&);
  HttpResponse() : was_successful(0), document_body() {
  }

  virtual ~HttpResponse() throw();
  bool was_successful;
  std::string document_body;

  _HttpResponse__isset __isset;

  void __set_was_successful(const bool val);

  void __set_document_body(const std::string& val);

  bool operator == (const HttpResponse & rhs) const
  {
    if (!(was_successful == rhs.was_successful))
      return false;
    if (!(document_body == rhs.document_body))
      return false;
    return true;
  }
  bool operator != (const HttpResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HttpResponse &a, HttpResponse &b);

inline std::ostream& operator<<(std::ostream& out, const HttpResponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
