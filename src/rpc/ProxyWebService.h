/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ProxyWebService_H
#define ProxyWebService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "proxy_web_service_types.h"

namespace rpc {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ProxyWebServiceIf {
 public:
  virtual ~ProxyWebServiceIf() {}
  virtual void get_response(HttpResponse& _return, const HttpRequest& request) = 0;
};

class ProxyWebServiceIfFactory {
 public:
  typedef ProxyWebServiceIf Handler;

  virtual ~ProxyWebServiceIfFactory() {}

  virtual ProxyWebServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProxyWebServiceIf* /* handler */) = 0;
};

class ProxyWebServiceIfSingletonFactory : virtual public ProxyWebServiceIfFactory {
 public:
  ProxyWebServiceIfSingletonFactory(const boost::shared_ptr<ProxyWebServiceIf>& iface) : iface_(iface) {}
  virtual ~ProxyWebServiceIfSingletonFactory() {}

  virtual ProxyWebServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProxyWebServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProxyWebServiceIf> iface_;
};

class ProxyWebServiceNull : virtual public ProxyWebServiceIf {
 public:
  virtual ~ProxyWebServiceNull() {}
  void get_response(HttpResponse& /* _return */, const HttpRequest& /* request */) {
    return;
  }
};

typedef struct _ProxyWebService_get_response_args__isset {
  _ProxyWebService_get_response_args__isset() : request(false) {}
  bool request :1;
} _ProxyWebService_get_response_args__isset;

class ProxyWebService_get_response_args {
 public:

  ProxyWebService_get_response_args(const ProxyWebService_get_response_args&);
  ProxyWebService_get_response_args& operator=(const ProxyWebService_get_response_args&);
  ProxyWebService_get_response_args() : request() {
  }

  virtual ~ProxyWebService_get_response_args() throw();
  HttpRequest request;

  _ProxyWebService_get_response_args__isset __isset;

  void __set_request(const HttpRequest& val);

  bool operator == (const ProxyWebService_get_response_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ProxyWebService_get_response_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProxyWebService_get_response_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProxyWebService_get_response_pargs {
 public:


  virtual ~ProxyWebService_get_response_pargs() throw();
  const HttpRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProxyWebService_get_response_result__isset {
  _ProxyWebService_get_response_result__isset() : success(false) {}
  bool success :1;
} _ProxyWebService_get_response_result__isset;

class ProxyWebService_get_response_result {
 public:

  ProxyWebService_get_response_result(const ProxyWebService_get_response_result&);
  ProxyWebService_get_response_result& operator=(const ProxyWebService_get_response_result&);
  ProxyWebService_get_response_result() {
  }

  virtual ~ProxyWebService_get_response_result() throw();
  HttpResponse success;

  _ProxyWebService_get_response_result__isset __isset;

  void __set_success(const HttpResponse& val);

  bool operator == (const ProxyWebService_get_response_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProxyWebService_get_response_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProxyWebService_get_response_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProxyWebService_get_response_presult__isset {
  _ProxyWebService_get_response_presult__isset() : success(false) {}
  bool success :1;
} _ProxyWebService_get_response_presult__isset;

class ProxyWebService_get_response_presult {
 public:


  virtual ~ProxyWebService_get_response_presult() throw();
  HttpResponse* success;

  _ProxyWebService_get_response_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ProxyWebServiceClient : virtual public ProxyWebServiceIf {
 public:
  ProxyWebServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProxyWebServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_response(HttpResponse& _return, const HttpRequest& request);
  void send_get_response(const HttpRequest& request);
  void recv_get_response(HttpResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProxyWebServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ProxyWebServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProxyWebServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_response(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProxyWebServiceProcessor(boost::shared_ptr<ProxyWebServiceIf> iface) :
    iface_(iface) {
    processMap_["get_response"] = &ProxyWebServiceProcessor::process_get_response;
  }

  virtual ~ProxyWebServiceProcessor() {}
};

class ProxyWebServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProxyWebServiceProcessorFactory(const ::boost::shared_ptr< ProxyWebServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProxyWebServiceIfFactory > handlerFactory_;
};

class ProxyWebServiceMultiface : virtual public ProxyWebServiceIf {
 public:
  ProxyWebServiceMultiface(std::vector<boost::shared_ptr<ProxyWebServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProxyWebServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ProxyWebServiceIf> > ifaces_;
  ProxyWebServiceMultiface() {}
  void add(boost::shared_ptr<ProxyWebServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_response(HttpResponse& _return, const HttpRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_response(_return, request);
    }
    ifaces_[i]->get_response(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ProxyWebServiceConcurrentClient : virtual public ProxyWebServiceIf {
 public:
  ProxyWebServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProxyWebServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_response(HttpResponse& _return, const HttpRequest& request);
  int32_t send_get_response(const HttpRequest& request);
  void recv_get_response(HttpResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
